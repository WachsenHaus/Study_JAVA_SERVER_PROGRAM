{"version":3,"sources":["App03_example.js","serviceWorker.js","index.js"],"names":["App03_example","state","index","msgs","handleKeyUp","e","console","log","keyCode","target","value","content","key","setState","result","concat","handleClick","msg","inputText","ref","type","onKeyUp","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mMAmDeA,E,4MAhDXC,MAAM,CACFC,MAAM,EACNC,KAAK,I,EAGTC,YAAY,SAACC,GAKT,GAHAC,QAAQC,IAAIF,EAAEG,SAEdF,QAAQC,IAAIF,EAAEI,OAAOC,OACL,IAAbL,EAAEG,QAAc,CACf,IAAIG,EAAS,wBAAIC,IAAK,EAAKX,MAAMC,OAAQG,EAAEI,OAAOC,OAClD,EAAKG,SAAS,CAACX,MAAO,EAAKD,MAAMC,MAAM,IAEvC,IAAIY,EAAO,EAAKb,MAAME,KAAKY,OAAOJ,GAElC,EAAKE,SAAS,CAACV,KAAKW,M,EAI5BE,YAAY,WAER,IAAIC,EAAI,EAAKC,UAAUR,MACnBC,EAAS,wBAAIC,IAAK,EAAKX,MAAMC,OAAQe,GACrC,EAAKJ,SAAS,CAACX,MAAO,EAAKD,MAAMC,MAAM,IAE3C,IAAIY,EAAO,EAAKb,MAAME,KAAKY,OAAOJ,GAElC,EAAKE,SAAS,CAACV,KAAKW,K,uDAEd,IAAD,OACL,OACI,6BACI,0FACA,2BAAOK,IAGH,SAACA,GAAO,EAAKD,UAAUC,GACzBC,KAAK,OAAOC,QAASC,KAAKlB,cAC5B,2BAAOgB,KAAK,OAAOC,QAASC,KAAKlB,cACjC,2BAAOgB,KAAK,OAAOC,QAASC,KAAKlB,cACjC,4BAAQmB,QAASD,KAAKN,aAAtB,gBACA,4BAAKM,KAAKrB,MAAME,W,GA3CJqB,aCURC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.551b4845.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass App03_example extends Component {\r\n    state={\r\n        index:0,\r\n        msgs:[]\r\n    };\r\n\r\n    handleKeyUp=(e)=>{\r\n        //눌러진 키의 코드값\r\n        console.log(e.keyCode);\r\n        //input 요소에 입력한 value 값\r\n        console.log(e.target.value);\r\n        if(e.keyCode == 13){ //엔터키를 눌렀을때\r\n            let content=(<li key={this.state.index}>{e.target.value}</li>);\r\n            this.setState({index: this.state.index+1});\r\n            //기존의 배열에 아이템을 추가해서 새로운 배열을 만들어내기\r\n            let result=this.state.msgs.concat(content);\r\n            //새로운 배열을 state 에 적용해서 UI 가 수정되도록 한다.\r\n            this.setState({msgs:result});\r\n        }\r\n    }\r\n    //전송 버튼을 눌럿을때 호출되는 함수 \r\n    handleClick=()=>{\r\n        //입력한 문자열\r\n        let msg=this.inputText.value;\r\n        let content=(<li key={this.state.index}>{msg}</li>);\r\n            this.setState({index: this.state.index+1});\r\n        //기존의 배열에 아이템을 추가해서 새로운 배열을 만들어내기\r\n        let result=this.state.msgs.concat(content);\r\n        //새로운 배열을 state 에 적용해서 UI 가 수정되도록 한다.\r\n        this.setState({msgs:result});\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>목록 출력 예제 입니다.</h1>\r\n                <input ref={\r\n                    //함수의 인자로 input 요소의 참조값이 전달된다.\r\n                    //전달된 참조값을 필드에 inputText 라는 키값으로 저장한다.\r\n                    (ref)=>{this.inputText=ref}\r\n                } type=\"text\" onKeyUp={this.handleKeyUp}/>\r\n                <input type=\"text\" onKeyUp={this.handleKeyUp}/>\r\n                <input type=\"text\" onKeyUp={this.handleKeyUp}/>\r\n                <button onClick={this.handleClick}>전송</button>\r\n                <ul>{this.state.msgs}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App03_example;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App03_example';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}